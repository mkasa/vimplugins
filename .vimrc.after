" Generic Settings
"
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Syntactic
"
let g:syntastic_cpp_compiler = '/usr/local/bin/g++-4.8'
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
" ghc-mod support was dropped from Syntastic 3.8. See https://github.com/vim-syntastic/syntastic/issues/1576
" let g:syntastic_haskell_checkers = ['ghc-mod']
let g:syntastic_x10_checkers = ['x10cpp']
" let g:syntastic_python_checkers = ['python']
" let g:syntastic_python3_checkers = ['python']
let g:syntastic_mode_map = {
     \ "mode": "active",
     \ "passive_filetypes": ["haskell", "x10"] }
" let b:syntastic_python_python_exec =
  " \ syntastic#util#parseShebang(bufnr(''))['exe']  =~# '\m\<python3'
  " \ ? 'python3'
  " \ : 'python'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Solarize
"
set background=dark
" let g:solarized_termcolors=256
colorscheme solarized

" Dash
"
let g:dash_activate=0

" Keybinds
"
function! BufferKeyBind()
    nnoremap <buffer> <space>s :SyntasticCheck<Cr>
    nnoremap <buffer> <space>S :SyntasticToggleMode<Cr>
    nnoremap <buffer> <space>e :Errors<Cr>
    nnoremap <buffer> <space>E :lclose<Cr>
    nnoremap <buffer> <space>q :copen<Cr>
    nnoremap <buffer> <space>Q :ccl<Cr>
    nnoremap <buffer> <space>t/ :Tabularize /
    nnoremap <buffer> <space>t, :Tabularize /,/l0l1<Cr>
    vnoremap <buffer> <space>t: :Tabularize /:\zs\(/\)\@!<Cr>
    nnoremap <buffer> <silent> <space>r :QuickRun<Cr>
    nnoremap <buffer> <silent> <space>4 :<C-u>bw! \[quickrun\ output\]<Cr>
    nnoremap <buffer> <silent> <space>R :Repl<Cr>
    nnoremap <buffer> <space>W :wa\|execute "!git commit -am 'WIP'" \|redraw!<Cr>
    nnoremap <buffer> <space>C :wa\|execute "!git commit -a" \|redraw!<Cr>
    nnoremap <buffer> <space>M :wa\|execute "!grip -b %:p 2>/dev/null&" \|redraw!<Cr>
    nnoremap <buffer> <space>m :wa\|silent! make\|cw\|redraw!<Cr>
    nnoremap <buffer> <space>L :!tig<Cr>
    nnoremap <buffer> <leader>od :NeoCompleteDisable<Cr>
    nnoremap <buffer> <leader>oe :NeoCompleteEnable<Cr>
    map <buffer> ga <Plug>(easymotion-prefix)
    if g:os == "mac"
        nmap <buffer> <silent> <space>z <Plug>DashSearch
        nmap <buffer> <silent> <space>Z <Plug>DashGlobalSearch
    endif
    nnoremap <buffer> <space>up :Unite process<Cr>
    nnoremap <buffer> <space>uG :Unite -auto-preview grammarous<Cr>
    nnoremap <buffer> <space>ug :Unite -auto-preview grep/git<Cr>
    nnoremap <buffer> <space>um :Unite mapping<Cr>
    nnoremap <buffer> <space>us :Unite source<Cr>
    nnoremap <buffer> <space>uj :Unite jump<Cr>
    nnoremap <buffer> <space>ut :UniteWithCursorWord tag<Cr>
    nnoremap <buffer> <space>uT :Unite tag<Cr>
    nnoremap <buffer> <space>uP :Unite process<Cr>
    nnoremap <buffer> <space>ub :Unite vim_bookmarks<Cr>
    nnoremap <buffer> <space>ul :Unite launcher<Cr>
    nnoremap <buffer> <space>uy :Unite history/yank<Cr>
    nnoremap <buffer> q: <NOP>
    nnoremap <buffer> <F5> q:
    nnoremap <buffer> <space>jk :call cscope#findInteractive(expand('<cword>'))<CR>
    nnoremap <buffer> <space>js :cs f s <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>jg :cs f g <C-R>=expand('<cword>')<CR><CR>
    nnoremap <buffer> <space>jd :cs f d <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>jc :cs f c <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>jt :cs f t <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>je :cs f e <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>jf :cs f f <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>ji :cs f i <C-R>=expand('<cword>')<CR><CR>:cw<CR>
    nnoremap <buffer> <space>ja :cs f a <C-R>=expand('<cword>')<CR><CR>:cw<CR>
endfunction

function! BufferKeyBindHaskell()
    nnoremap <buffer> <Nul> :GhcModType<Return>
    nnoremap <buffer> <space>I :<C-u>Unite haskellimport<Cr>
    nnoremap <buffer> <space>i :<C-u>UniteWithCursorWord haskellimport<Cr>
    nnoremap <buffer> <space>O :<C-u>Unite hoogle<Cr>
    nnoremap <buffer> <space>o :<C-u>UniteWithCursorWord -auto-preview hoogle<Cr>
    nnoremap <buffer> <space>D :<C-u>Unite haddock<Cr>
    nnoremap <buffer> <space>d :<C-u>UniteWithCursorWord haddock<Cr>
    nnoremap <buffer> <space>c :GhcModCheckAsync<Cr>
    nnoremap <buffer> <space>l :GhcModLintAsync<Cr>
    nnoremap <buffer> <space>g :GhcModSigCodegen<Cr>
    nnoremap <buffer> <space>p :GhcModSplitFunCase<Cr>
    nnoremap <buffer> <space>t :GhcModTypeInsert<Cr>
    nnoremap <buffer> <space>x :GhcModExpand<Cr>
    nnoremap <buffer> <space>S :%!stylish-haskell<Cr>
    vnoremap <buffer> <space>s :!stylish-haskell<Cr>
    inoremap <buffer> <C-f> <C-O>:call GotoSpecifiedChar()<Cr>
    nnoremap <buffer> <leader>hc :call FlushHaskellCache()<Cr>
endfunction

function! FlushHaskellCache()
    if exists('*necoghc#invalidate_all_module_names')
        call necoghc#invalidate_all_module_names()
    else
        " nothing
    endif
endfunction

" Vim-bookmark
"
let g:bookmark_sign = '='
let g:bookmark_annotation_sign = '#'
let g:bookmark_manage_per_buffer = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
    nmap mm :BookmarkToggle<CR>
    nmap mi :BookmarkAnnotate<CR>
    nmap mj :BookmarkNext<CR>
    nmap mk :BookmarkPrev<CR>
    nmap ma :BookmarkShowAll<CR>
    nmap mc :BookmarkClear<CR>
    nmap mx :BookmarkClearAll<CR>
endfunction
function! BookmarkUnmapKeys()
    unmap mm
    unmap mi
    unmap mj
    unmap mk
    unmap ma
    unmap mc
    unmap mx
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
autocmd BufEnter * :call BufferKeyBind()
autocmd BufEnter *.hs :call BufferKeyBindHaskell()

" Unite
"
let g:unite_source_haddock_browser = 'lopen'
" let g:unite_source_haddock_foreground_browser = 'env TERM=xterm-color elinks'
let g:unite_source_haddock_foreground_browser = 'elinks'
call unite#custom_default_action('haddock', 'browse_remote')
call unite#custom_default_action('hoogle', 'browse_remote')

" Jedi
"
function! JediSettings()
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    " Neocomplete + Python (should we move this to .vimrc.after?)
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python =
             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
endfunction
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType python :call JediSettings()


" Neco-ghc
"
let g:necoghc_enable_detailed_browse = 1
" let g:necoghc_debug = 1


" Neosnippet
"
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif

" Fugitive
"
set diffopt+=vertical

" Add support for markdown files in tagbar.
"
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags.py',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
    \ }

" Add support for R
"
" NOTE: Make sure you read https://github.com/majutsushi/tagbar/wiki#r
"       You need to set up ~/.ctags to make it work
let g:tagbar_type_r = {
    \ 'ctagstype' : 'r',
    \ 'kinds'     : [
        \ 'f:Functions',
        \ 'g:GlobalVariables',
        \ 'v:FunctionVariables',
    \ ]
\ }

" Add repl settings
"
let g:repl_filetype_repl = {
    \       'haskell' : {
    \           'repl' : 'stack exec -- ghci',
    \           'opt'  : ''
    \       }
    \  }
let g:repl_no_default_keymappings = 1

" QuickRun
"
let g:quickrun_config = {}
let g:quickrun_config.haskell = {
    \'command': 'stack',
    \'cmdopt':  'runghc -- ',
    \'args': '%{input("args> ")}',
    \}

" For faster boot
"
set clipboard=exclude:.*

" For Nvim-R
"
let g:R_assign = 0

" For Grammarous
"
let g:grammarous#default_comments_only_filetypes = {
            \ '*' : 1, 'help' : 0, 'markdown' : 0,
            \ }

" pbpaste
"

nnoremap cp :r!pbpaste<Cr>

" vim-multiple-cursor
"

" The funcions below prevents vim-multiple-cursor with conflicting with
" neocomplete
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
  " call youcompleteme#DisableCursorMovedAutocommands()
endfunction

function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
  " call youcompleteme#EnableCursorMovedAutocommands()
endfunction

" vim-clang
"
let g:clang_auto = 0
let g:clang_c_completeopt="longest,menu"
let g:clang_cpp_completeopt="longest,menu"
let g:neocomplete#enable_complete_select=0
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.c =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
let g:neocomplete#sources#syntax#min_keyword_length = 2


" typescript
"
let g:neocomplete#force_omni_input_patterns.typescript =
      \ '[^.[:digit:] *\t]\%(\.\)\w*\|from ''\w*'
let g:tsuquyomi_completion_detail = 1
let g:tagbar_type_typescript = {
  \ 'ctagsbin' : 'tstags',
  \ 'ctagsargs' : '-f-',
  \ 'kinds': [
    \ 'e:enums:0:1',
    \ 'f:function:0:1',
    \ 't:typealias:0:1',
    \ 'M:Module:0:1',
    \ 'I:import:0:1',
    \ 'i:interface:0:1',
    \ 'C:class:0:1',
    \ 'm:method:0:1',
    \ 'p:property:0:1',
    \ 'v:variable:0:1',
    \ 'c:const:0:1',
  \ ],
  \ 'sort' : 0
  \ }

augroup tslint
  function! s:typescript_after(ch, msg)
    let cnt = len(getqflist())
    if cnt > 0
      echomsg printf('[Tslint] %s errors', cnt)
    endif
  endfunction
  let g:tslint_callbacks = {
    \ 'after_run': function('s:typescript_after')
    \ }

  let g:tsuquyomi_disable_quickfix = 1

  function! s:ts_quickfix()
    let winid = win_getid()
    execute ':TsuquyomiGeterr'
    call tslint#run('a', winid)
  endfunction

  autocmd BufWritePost *.ts,*.tsx silent! call s:ts_quickfix()
  autocmd InsertLeave *.ts,*.tsx silent! call s:ts_quickfix()
augroup END

function! BufferKeyBindTypeScript()
    nnoremap <buffer> <space>l :Tslint<Cr>
    nnoremap <buffer> <space>L :TslintFix<Cr>
endfunction
autocmd BufEnter *.hs :call BufferKeyBindTypeScript()

" vim-cheatsheet
"
let g:cheatsheet#cheat_file = '~/.vim-cheatsheet.md'


" CTRL-P
"
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v(venv|build|dist|__pycache__|\.git|.*\.egg-info|node_modules)$',
  \ 'file': '\v(tags|__Tagbar__|cscope.out)$',
  \ 'link': '\v$',
  \ }

" Load local init script if any
"
if filereadable(expand("~/.vimrc.after.local"))
  source ~/.vimrc.after.local
endif

