" Generic Settings
"
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Syntactic
"
let g:syntastic_cpp_compiler = '/usr/local/bin/g++-4.8'
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_haskell_checkers = ['ghc_mod']
let g:syntastic_x10_checkers = ['x10cpp']
let g:syntastic_mode_map = {
     \ "mode": "active",
     \ "passive_filetypes": ["haskell", "x10"] }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Solarize
"
set background=dark
" let g:solarized_termcolors=256
colorscheme solarized

" Dash
"
let g:dash_activate=0

" Keybinds
"
function! BufferKeyBind()
    nnoremap <buffer> <space>s :SyntasticCheck<Cr>
    nnoremap <buffer> <space>S :SyntasticToggleMode<Cr>
    nnoremap <buffer> <space>e :Errors<Cr>
    nnoremap <buffer> <space>E :lclose<Cr>
    nnoremap <buffer> <space>t :Tabularize /
    vnoremap <buffer> <space>t :Tabularize /
    vnoremap <buffer> <space>T :Tabularize /:\zs\(/\)\@!<Cr>
    nmap <silent> <space>r <Plug>(quickrun)
    nmap <silent> <space>R <Plug>(repl-run)
    nnoremap <buffer> <space>C :!git commit -am 'WIP'<Cr>
    nnoremap <buffer> <space>M :!grip -b %:p &<Cr>
    nnoremap <buffer> <space>m :make<Cr>
    nnoremap <buffer> <space>l :!tig<Cr>
    if g:os == "mac"
        nmap <silent> <space>z <Plug>DashSearch
        nmap <silent> <space>Z <Plug>DashGlobalSearch
    endif
endfunction

function! BufferKeyBindHaskell()
    nnoremap <Nul> :GhcModType<Return>
    nnoremap <buffer> <space>I :<C-u>Unite haskellimport<Cr>
    nnoremap <buffer> <space>i :<C-u>UniteWithCursorWord haskellimport<Cr>
    nnoremap <buffer> <space>O :<C-u>Unite hoogle<Cr>
    nnoremap <buffer> <space>o :<C-u>UniteWithCursorWord -auto-preview hoogle<Cr>
    nnoremap <buffer> <space>D :<C-u>Unite haddock<Cr>
    nnoremap <buffer> <space>d :<C-u>UniteWithCursorWord haddock<Cr>
    nnoremap <buffer> <space>c :GhcModCheckAsync<Cr>
    nnoremap <buffer> <space>l :GhcModLintAsync<Cr>
    nnoremap <buffer> <space>g :GhcModSigCodegen<Cr>
    nnoremap <buffer> <space>p :GhcModSplitFunCase<Cr>
    nnoremap <buffer> <space>t :GhcModTypeInsert<Cr>
    nnoremap <buffer> <space>x :GhcModExpand<Cr>
    vnoremap <buffer> <space>s :!stylish-haskell<Cr>
    nnoremap <space>jfa :call cscope#findInteractive(expand('<cword>'))<CR>
    nnoremap <leader>hc :call FlushHaskellCache()<Cr>
    " nnoremap <space>jl :call ToggleLocationList()<CR>
    nnoremap <space>jl :copen<CR>
    nnoremap <space>jfs :cs f s <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jfg :cs f g <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jfd :cs f d <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jfc :cs f c <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jft :cs f t <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jfe :cs f e <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jff :cs f f <C-R>=expand('<cword>')<CR><CR>
    nnoremap <space>jfi :cs f i <C-R>=expand('<cword>')<CR><CR>
endfunction

function! FlushHaskellCache()
    if exists('*necoghc#invalidate_all_module_names')
        call necoghc#invalidate_all_module_names()
    else
        " nothing
    endif
endfunction

" Vim-bookmark
"
let g:bookmark_sign = '='
let g:bookmark_annotation_sign = '#'
let g:bookmark_manage_per_buffer = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
    nmap mm :BookmarkToggle<CR>
    nmap mi :BookmarkAnnotate<CR>
    nmap mj :BookmarkNext<CR>
    nmap mk :BookmarkPrev<CR>
    nmap ma :BookmarkShowAll<CR>
    nmap mc :BookmarkClear<CR>
    nmap mx :BookmarkClearAll<CR>
endfunction
function! BookmarkUnmapKeys()
    unmap mm
    unmap mi
    unmap mj
    unmap mk
    unmap ma
    unmap mc
    unmap mx
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
autocmd BufEnter * :call BufferKeyBind()
autocmd BufEnter *.hs :call BufferKeyBindHaskell()

" Unite
"
let g:unite_source_haddock_browser = 'lopen'
" let g:unite_source_haddock_foreground_browser = 'env TERM=xterm-color elinks'
let g:unite_source_haddock_foreground_browser = 'elinks'
call unite#custom_default_action('haddock', 'browse_remote')
call unite#custom_default_action('hoogle', 'browse_remote')

" Jedi
"
function! JediSettings()
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    " Neocomplete + Python (should we move this to .vimrc.after?)
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python =
             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
    let g:neocomplete#sources#syntax#min_keyword_length = 2
endfunction
autocmd FileType python setlocal completeopt-=preview
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType python :call JediSettings()


" Neco-ghc
"
let g:necoghc_enable_detailed_browse = 1
" let g:necoghc_debug = 1


" Neosnippet
"
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif

" Fugitive
"
set diffopt+=vertical

" Add support for markdown files in tagbar.
"
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags.py',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
    \ }

" Add repl settings
"
let g:repl_filetype_repl = {
    \       'haskell' : {
    \           'repl' : 'stack exec -- ghci',
    \           'opt'  : ''
    \       }
    \  }
let g:repl_no_default_keymappings = 1

" QuickRun
"
let g:quickrun_config = {}
let g:quickrun_config.haskell = {
    \'command': 'stack',
    \'cmdopt':  'runghc -- ',
    \'args': '%{input("args> ")}',
    \}

" For faster boot
"
set clipboard=exclude:.*

" Load local init script if any
"
if filereadable(expand("~/.vimrc.after.local"))
  source ~/.vimrc.after.local
endif

